#!/usr/bin/env bash

# ~=~=~=~~=~=~=~ output-helpers ~=~=~=~~=~=~=~

errecho() {
   local color
   color=$1
   shift

   # valid colors
   if [[ $color =~ (bold|green|yellow|grey|red) ]]; then
      [[ $color == bold   ]] && (>&2 echo -e "\033[1;1m${*}\033[0m")
      [[ $color == green  ]] && (>&2 echo -e "\033[1;32m${*}\033[0m")
      [[ $color == yellow ]] && (>&2 echo -e "\033[1;33m${*}\033[0m")
      [[ $color == grey   ]] && (>&2 echo -e "\033[37m${*}\033[0m")
      [[ $color == red    ]] && (>&2 echo -e "\033[1;91m${*}\033[0m")
      return 0
   fi

   # otherwise plain
   (>&2 echo "${*}")
   return 0
}

log() {
   local level
   local color

   level=info
   [[ $1 =~ (debug|info|success|warn|error) ]] && {
      level=$1
      shift
   }

   color=plain # no-level
   [[ $level == debug   ]] && color=grey
   [[ $level == info    ]] && color=bold
   [[ $level == success ]] && color=green
   [[ $level == warn    ]] && color=yellow
   [[ $level == error   ]] && color=red

   if [[ $DEBUG ]]; then
      if  [[ $use_color ]]
      then errecho "$color" "vagrant-shim: $*"
      else errecho plain "vagrant-shim [$level]: $*"
      fi
   elif [[ $level != debug ]]; then
      if  [[ $use_color ]]
      then errecho "$color" "$*"
      else errecho plain "vagrant-shim [$level]: $*"
      fi
   fi

   return 0
}

ensure_vagrantfile() {
   if [[ -z $has_vagrantfile ]]; then
      log warn 'Vagrantfile missing, showing global-status'
      command $vg_cmd global-status
      exit 1
   fi
}

# most generic extension: show nicer error (i.e. global-status) when no Vagrantfile present
run_if_vagrantfile() {
   log debug "extending vagrant $1"
   ensure_vagrantfile
   command $vg_cmd "$@"
}

# ~=~=~=~~=~=~=~ basic-setup ~=~=~=~~=~=~=~

# use color if "stdout" exists (which implies *not* in a pipe/redireciton)
[ -t 1 ] && use_color=true || use_color=''

log debug "use_color: '$use_color'"

# use grc if available
if type -p grc > /dev/null && [[ $use_color ]]; then
   vg_cmd='grc vagrant'
else
   vg_cmd='vagrant'
fi

log debug "vg_cmd: '$vg_cmd'"

# generate configuration paths

if [[ -f Vagrantfile ]]; then
   has_vagrantfile=true
   project_path=$(pwd)
   project_hash=$(md5 <<< "$(pwd)")
   ssh_config_path=/tmp/vagrant-${project_hash}-ssh-config

   log debug "has_vagrantfile '$has_vagrantfile'"
   log debug "project_path    '$project_path'"
   log debug "project_hash    '$project_hash'"
   log debug "ssh_config_path '$ssh_config_path'"
fi

# ~=~=~=~~=~=~=~ @extension: status ~=~=~=~~=~=~=~

extension_status() {
   log debug 'extending vagrant status'
   ensure_vagrantfile

   command $vg_cmd "$@"
}

# ~=~=~=~~=~=~=~ @extension: up ~=~=~=~~=~=~=~
# ~=~=~=~~=~=~=~ @extension: reload ~=~=~=~~=~=~=~

run_then_update_ssh_config() {
   run_if_vagrantfile "$@"

   lastexit=$?
   (( $lastexit == 0 )) && update_ssh_config "$ssh_config_path"

   return $lastexit
}

extension_up() {
   run_then_update_ssh_config "$@"
}

extension_reload() {
   run_then_update_ssh_config "$@"
}

# ~=~=~=~~=~=~=~ @extension: ssh ~=~=~=~~=~=~=~

check_ssh_config() {
   if command grep -q 'User vagrant' "$1"; then
      log debug "'$1' looks like valid ssh-config"
      return 0
   fi

   log warn "'$1' does not look like valid ssh-config"
   return 1
}

update_ssh_config() {
   if [[ -z $1 ]]; then
      log warn 'update_ssh_config missing cache-path'
      return 1
   fi

   log 'updating cached ssh-config'
   command $vg_cmd ssh-config > "$1" 2> "$ssh_config_path-err"
   log debug "vagrant ssh-config exited with: $?"

   while read line; do
      log debug "ssh-config err: $line"
   done < "$ssh_config_path-err"

   check_ssh_config "$1"
}

ssh_shim() {
   local ssh_exit
   local retry_with_updated_config
   local ssh_err
   local inspect_line

   ssh_err=/tmp/vagrant-${project_hash}-ssh-stderr

   log debug "ssh-shim options
config   : '$1'
host     : '$2'
command  : '$3'
err-file : '$ssh_err'"

   [[ $3 ]] && log "running '$3' on '$2'" || log "ssh'ing into '$2'"

   ssh -F "$1" "$2" "$3" 2> >(tee "$ssh_err" >&2)

   ssh_exit=$?
   (( $ssh_exit == 0 )) && log debug "ssh first exit-code: $ssh_exit"
   (( $ssh_exit > 0  )) && log warn  "ssh exited with non-zero status: $ssh_exit"

   (( $ssh_exit == 255 )) && [[ ! -s $ssh_err ]] && {
      log debug 'ssh logged nothing to stderr, retrying verbosely'

      ssh -v -F "$1" "$2" "$3" 2> "$ssh_err"

      ssh_exit=$?
      log debug "ssh-verbose exit-code: $ssh_exit"
   }

   retry_with_updated_config=''

   (( $ssh_exit == 255 )) && {
      inspect_line=$(tail -n1 "$ssh_err")
      log debug "last line of stderr: $inspect_line"

      [[ $inspect_line =~ ssh.+Connection\ refused ]] && {
         log debug 'matched "â€¦ Connection refused" marking retrying with new ssh-config'
         retry_with_updated_config=true
      }
   }

   [[ $retry_with_updated_config ]] && {
      log debug 'ssh retrying with updated config'

      update_ssh_config "$1" && ssh -F "$1" "$2" "$3"
   }
}

extension_ssh() {
   log debug 'extending vagrant ssh'

   ensure_vagrantfile

   log debug 'no vagrant-flags found, proceeding with shim'

   [[ -s $ssh_config_path ]] || update_ssh_config "$ssh_config_path"

   if check_ssh_config "$ssh_config_path"; then
      log debug "trying ssh with '$ssh_config_path'"

      # check host against active-hosts
      active_hosts=$(grep -E '^Host .+' "$ssh_config_path" | awk '{print $2}')
      log debug "active-hosts [$(tr '\n' ',' <<< "$active_hosts" | sed 's/,$//')]"

      # check if param-2 is active-host
      selected_host=$(grep -E "^${2}\$" <<< "$active_hosts")

      if [[ $selected_host ]]; then
         log debug "using param-2 '$selected_host' as host"
         shift
      else
         log debug "param-2: '$2' is not an active host"

         # select default (vagrant seems to default to the last box defined?)
         selected_host=$(tail -n1 <<< "$active_hosts")
         log debug "using first active host '$selected_host'"
      fi

      ssh_shim "$ssh_config_path" "$selected_host" "$2"
      return $?
   else
      log error 'stopping ssh-shim because ssh-config is invalid'
      return 1
   fi
}

# ~=~=~=~~=~=~=~ @extension: ssh-config ~=~=~=~~=~=~=~

extension_ssh_config() {
   log debug 'extending vagrant ssh-config'

   if update_ssh_config "$ssh_config_path"; then
      cat "$ssh_config_path"
      return 0
   fi

   return 1
}

# ~=~=~=~~=~=~=~ @new-command @extension: ssh-config-file ~=~=~=~~=~=~=~

extension_ssh_config_file() {
   log debug 'extending vagrant with new command ssh-config-file'
   ensure_vagrantfile

   log debug "ssh-config-file echoing $ssh_config_path"
   echo "$ssh_config_path"
   return 0
}

# ~=~=~=~~=~=~=~ handle ~=~=~=~~=~=~=~

case $1 in
   ssh-config|ssh-config-file|status|up|reload)
      extension_${1/-/_/} "$@"
   ;;

   ssh)
      vagrant_flag_found=''

      for word in "${@:2}"; do
         log debug "checking parameter '$word'"

         [[ $word =~ ^- ]] && {
            log debug "found flag argument '$word'"
            vagrant_flag_found=true
         }
      done

      if [[ $vagrant_flag_found ]]; then
         log debug 'skipping shim becuase flags were passed'
         exec $vg_cmd "$@"
      else
         extension_ssh "$@"
      fi
   ;;

   *)
      log debug "no extensions or new-commands found: passing '$*' to vagrant"
      exec $vg_cmd "$@"
   ;;
esac
